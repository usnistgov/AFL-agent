{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "341bc47b",
   "metadata": {},
   "source": [
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/usnistgov/AFL-agent/blob/main/docs/source/tutorials/using_prefab.ipynb)\n",
    "\n",
    "# Using Prefabricated Pipelines\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "94aae7f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df5b7fd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from AFL.double_agent import *\n",
    "from AFL.double_agent.data import example_dataset1\n",
    "from AFL.double_agent.prefab import load_prefab, list_prefabs, combine_prefabs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "573d1b1d",
   "metadata": {},
   "source": [
    "Introduction\n",
    "-----------\n",
    "\n",
    "Prefabricated pipelines (prefabs) are pre-configured pipelines that can be easily loaded and used in your projects. \n",
    "This tutorial will guide you through the process of loading and using prefabricated pipelines from the ``AFL.double_agent.prefab`` module.\n",
    "\n",
    "Prefabricated pipelines are particularly useful when:\n",
    "\n",
    "* You have common processing steps that you use frequently\n",
    "* You want to share pipeline configurations with colleagues\n",
    "* You want to create building blocks that can be combined into more complex pipelines\n",
    "\n",
    "In this tutorial, we'll:\n",
    "\n",
    "1. Load an example dataset\n",
    "2. Load a prefabricated pipeline \n",
    "3. Inspect the pipeline\n",
    "4. Customize the pipeline to work with our dataset\n",
    "5. Execute the pipeline and analyze the results\n",
    "\n",
    "Let's get started!\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b97422d",
   "metadata": {},
   "source": [
    "## Google Colab Setup\n",
    "\n",
    "Only uncomment and run the next cell if you are running this notebook in Google Colab or if don't already have the AFL-agent package installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "26dfcff9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install git+https://github.com/usnistgov/AFL-agent.git"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34e6a733",
   "metadata": {},
   "source": [
    "\n",
    "## Loading an Example Dataset\n",
    "\n",
    "First, let's load an example dataset from the ``AFL.double_agent.data`` module:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76b65e22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=\"dark\"],\n",
       "html[data-theme=\"dark\"],\n",
       "body[data-theme=\"dark\"],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1f1f1f;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: inline-block;\n",
       "  opacity: 0;\n",
       "  height: 0;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:focus + label {\n",
       "  border: 2px solid var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: \"►\";\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: \"▼\";\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: \"(\";\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: \")\";\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: \",\";\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt; Size: 164kB\n",
       "Dimensions:              (sample: 100, component: 2, x: 150, grid: 2500)\n",
       "Coordinates:\n",
       "  * component            (component) &lt;U1 8B &#x27;A&#x27; &#x27;B&#x27;\n",
       "  * x                    (x) float64 1kB 0.001 0.001047 0.001097 ... 0.9547 1.0\n",
       "Dimensions without coordinates: sample, grid\n",
       "Data variables:\n",
       "    composition          (sample, component) float64 2kB ...\n",
       "    ground_truth_labels  (sample) int64 800B ...\n",
       "    measurement          (sample, x) float64 120kB ...\n",
       "    composition_grid     (grid, component) float64 40kB ...</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-ed317fc3-f51a-443d-8c7b-c72023f4160e' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-ed317fc3-f51a-443d-8c7b-c72023f4160e' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span>sample</span>: 100</li><li><span class='xr-has-index'>component</span>: 2</li><li><span class='xr-has-index'>x</span>: 150</li><li><span>grid</span>: 2500</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-2a4b3a5a-aa8f-4aac-abc4-77319289d74d' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2a4b3a5a-aa8f-4aac-abc4-77319289d74d' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>&lt;U1</div><div class='xr-var-preview xr-preview'>&#x27;A&#x27; &#x27;B&#x27;</div><input id='attrs-00746974-2bd2-4867-b879-9f93e16b5cef' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-00746974-2bd2-4867-b879-9f93e16b5cef' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4ef005af-523c-41f5-b045-5c1718fe48f1' class='xr-var-data-in' type='checkbox'><label for='data-4ef005af-523c-41f5-b045-5c1718fe48f1' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;A&#x27;, &#x27;B&#x27;], dtype=&#x27;&lt;U1&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.001 0.001047 ... 0.9547 1.0</div><input id='attrs-6a0650e5-3259-4a64-ad54-c9d53a166950' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6a0650e5-3259-4a64-ad54-c9d53a166950' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b990d1b1-07eb-4847-a7d9-c3dc975c4155' class='xr-var-data-in' type='checkbox'><label for='data-b990d1b1-07eb-4847-a7d9-c3dc975c4155' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0.001   , 0.001047, 0.001097, 0.001149, 0.001204, 0.001261, 0.001321,\n",
       "       0.001383, 0.001449, 0.001518, 0.00159 , 0.001665, 0.001744, 0.001827,\n",
       "       0.001914, 0.002005, 0.0021  , 0.002199, 0.002304, 0.002413, 0.002527,\n",
       "       0.002647, 0.002773, 0.002905, 0.003042, 0.003187, 0.003338, 0.003496,\n",
       "       0.003662, 0.003836, 0.004018, 0.004209, 0.004409, 0.004618, 0.004837,\n",
       "       0.005066, 0.005307, 0.005559, 0.005822, 0.006099, 0.006388, 0.006691,\n",
       "       0.007009, 0.007341, 0.00769 , 0.008055, 0.008437, 0.008837, 0.009256,\n",
       "       0.009696, 0.010156, 0.010638, 0.011142, 0.011671, 0.012225, 0.012805,\n",
       "       0.013413, 0.014049, 0.014716, 0.015414, 0.016146, 0.016912, 0.017714,\n",
       "       0.018555, 0.019435, 0.020358, 0.021324, 0.022335, 0.023395, 0.024505,\n",
       "       0.025668, 0.026886, 0.028162, 0.029498, 0.030898, 0.032364, 0.0339  ,\n",
       "       0.035509, 0.037194, 0.038959, 0.040807, 0.042744, 0.044772, 0.046897,\n",
       "       0.049122, 0.051453, 0.053894, 0.056452, 0.059131, 0.061936, 0.064875,\n",
       "       0.067954, 0.071179, 0.074556, 0.078094, 0.0818  , 0.085681, 0.089747,\n",
       "       0.094006, 0.098467, 0.103139, 0.108033, 0.11316 , 0.118529, 0.124154,\n",
       "       0.130045, 0.136216, 0.14268 , 0.14945 , 0.156542, 0.16397 , 0.171751,\n",
       "       0.179901, 0.188438, 0.197379, 0.206746, 0.216556, 0.226832, 0.237596,\n",
       "       0.24887 , 0.26068 , 0.27305 , 0.286006, 0.299578, 0.313794, 0.328684,\n",
       "       0.344281, 0.360618, 0.37773 , 0.395654, 0.414429, 0.434094, 0.454693,\n",
       "       0.476269, 0.498869, 0.522542, 0.547337, 0.57331 , 0.600514, 0.62901 ,\n",
       "       0.658858, 0.690122, 0.72287 , 0.757172, 0.793102, 0.830736, 0.870156,\n",
       "       0.911447, 0.954697, 1.      ])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-4a8192df-c233-4e85-a3f1-df487205003e' class='xr-section-summary-in' type='checkbox'  checked><label for='section-4a8192df-c233-4e85-a3f1-df487205003e' class='xr-section-summary' >Data variables: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>composition</span></div><div class='xr-var-dims'>(sample, component)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-cb0e0e9e-6386-497b-8ec5-15dcd3548a46' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-cb0e0e9e-6386-497b-8ec5-15dcd3548a46' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-894f0b65-3185-4e16-b78b-50e6d86b1dcd' class='xr-var-data-in' type='checkbox'><label for='data-894f0b65-3185-4e16-b78b-50e6d86b1dcd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[200 values with dtype=float64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ground_truth_labels</span></div><div class='xr-var-dims'>(sample)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-c69ded51-2a1a-4d22-988d-9a0e67ddc448' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c69ded51-2a1a-4d22-988d-9a0e67ddc448' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-09d7e5d4-e794-4b0a-9c46-d2203b444644' class='xr-var-data-in' type='checkbox'><label for='data-09d7e5d4-e794-4b0a-9c46-d2203b444644' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[100 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>measurement</span></div><div class='xr-var-dims'>(sample, x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-e6801502-3dc4-4bc6-a147-128199e5f469' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e6801502-3dc4-4bc6-a147-128199e5f469' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0442785a-c278-4513-a510-545bba706793' class='xr-var-data-in' type='checkbox'><label for='data-0442785a-c278-4513-a510-545bba706793' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[15000 values with dtype=float64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>composition_grid</span></div><div class='xr-var-dims'>(grid, component)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-e193bb06-4be6-4520-a7e4-ceaaac5b75eb' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e193bb06-4be6-4520-a7e4-ceaaac5b75eb' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3a05cfbb-e659-482c-b9dc-0e26444f5a7f' class='xr-var-data-in' type='checkbox'><label for='data-3a05cfbb-e659-482c-b9dc-0e26444f5a7f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[5000 values with dtype=float64]</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-5a082f3c-368b-43dc-ac58-c86781fc6a26' class='xr-section-summary-in' type='checkbox'  ><label for='section-5a082f3c-368b-43dc-ac58-c86781fc6a26' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-984b7d98-e41e-4180-a292-ef05c5d5ca68' class='xr-index-data-in' type='checkbox'/><label for='index-984b7d98-e41e-4180-a292-ef05c5d5ca68' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;A&#x27;, &#x27;B&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-f0833801-582a-4291-9fdd-bb72e01385a7' class='xr-index-data-in' type='checkbox'/><label for='index-f0833801-582a-4291-9fdd-bb72e01385a7' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([                0.001, 0.0010474522360006332, 0.0010971561867027272,\n",
       "       0.0011492187010036998, 0.0012037516980200685, 0.0012608724076806808,\n",
       "        0.001320703622736631, 0.0013833739627296209,  0.001449018150486198,\n",
       "       0.0015177773017322714,\n",
       "       ...\n",
       "          0.6588581861506815,    0.6901224802908528,    0.7228703350949566,\n",
       "            0.75717214883374,    0.7931016603333051,    0.8307361074919352,\n",
       "          0.8701563933188907,    0.9114472598521185,    0.9546974703287516,\n",
       "                         1.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;, length=150))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1c597ec0-607b-45dc-b0e9-834db46d289c' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-1c597ec0-607b-45dc-b0e9-834db46d289c' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset> Size: 164kB\n",
       "Dimensions:              (sample: 100, component: 2, x: 150, grid: 2500)\n",
       "Coordinates:\n",
       "  * component            (component) <U1 8B 'A' 'B'\n",
       "  * x                    (x) float64 1kB 0.001 0.001047 0.001097 ... 0.9547 1.0\n",
       "Dimensions without coordinates: sample, grid\n",
       "Data variables:\n",
       "    composition          (sample, component) float64 2kB ...\n",
       "    ground_truth_labels  (sample) int64 800B ...\n",
       "    measurement          (sample, x) float64 120kB ...\n",
       "    composition_grid     (grid, component) float64 40kB ..."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the example dataset\n",
    "dataset = example_dataset1()\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "123cdc16",
   "metadata": {},
   "source": [
    "## Listing Available Prefabs\n",
    "\n",
    "Next, let's check what prefabricated pipelines are available:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f0b0bdde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Available Prefabricated Pipelines:\n",
      "|-----------------------|-------------------------------------------------------------------------------------------------------------|\n",
      "| Name                  | Description                                                                                                 |\n",
      "|-----------------------|-------------------------------------------------------------------------------------------------------------|\n",
      "| find_boundaries       | A simlarity-clustering-classification pipeline for finding boundaries in measurement data                   |\n",
      "| preprocess            | A pipeline that generates a Cartesian grid, normalizes data, and calculates derivatives using Savgol filter |\n",
      "| similarity_clustering | A simlarity-clustering pipeline for clustering measurements into groups                                     |\n",
      "|-----------------------|-------------------------------------------------------------------------------------------------------------|\n",
      "Total: 3 prefabricated pipeline(s)\n"
     ]
    }
   ],
   "source": [
    "# List all available prefabricated pipelines with descriptions\n",
    "list_prefabs()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9b4cecb",
   "metadata": {},
   "source": [
    "## Loading a Prefabricated Pipeline\n",
    "\n",
    "Let's load a prefabricated pipeline called \"preprocess\":"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae682619",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PipelineOp                               input_variable ---> output_variable\n",
      "----------                               -----------------------------------\n",
      "0  ) <CartesianGridGenerator>            CartesianGridGenerator ---> composition_grid\n",
      "1  ) <Standardize>                       composition_grid ---> normalized_composition_grid\n",
      "2  ) <Standardize>                       composition ---> normalized_composition\n",
      "3  ) <SavgolFilter>                      measurement ---> measurement_derivative0\n",
      "4  ) <SavgolFilter>                      measurement ---> measurement_derivative1\n",
      "5  ) <SavgolFilter>                      measurement ---> measurement_derivative2\n",
      "\n",
      "Input Variables\n",
      "---------------\n",
      "0) CartesianGridGenerator\n",
      "1) composition\n",
      "2) measurement\n",
      "\n",
      "Output Variables\n",
      "----------------\n",
      "0) normalized_composition_grid\n",
      "1) normalized_composition\n",
      "2) measurement_derivative0\n",
      "3) measurement_derivative1\n",
      "4) measurement_derivative2\n"
     ]
    }
   ],
   "source": [
    "# Load the \"preprocess\" prefabricated pipeline\n",
    "pipeline = load_prefab(\"preprocess\")\n",
    "pipeline.print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cc4a9dd",
   "metadata": {},
   "source": [
    "## Inspecting the Pipeline Structure\n",
    "\n",
    "To better understand the pipeline we've loaded, we can visualize it using the ``.draw()`` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a548e17f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the pipeline structure\n",
    "pipeline.draw();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2a9c229",
   "metadata": {},
   "source": [
    "## Generating Code for the Pipeline\n",
    "\n",
    "The ``print_code()`` method allows us to extract Python code that recreates the pipeline. This is particularly useful when we want to:\n",
    "\n",
    "1. Understand how the pipeline was built\n",
    "2. Modify the pipeline to suit our needs\n",
    "3. Create a new pipeline based on the existing one\n",
    "\n",
    "Now, let's reproduce the code from the Pipeline and modify it to work with our example dataset. You'll need to make the following changes:\n",
    "\n",
    "- Change the `dim` argument for the Savgol filters from \"q\" to \"x\" to match the example_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9f144895",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline code has been prepared in a new cell below.\n"
     ]
    }
   ],
   "source": [
    "# Generate code for the pipeline\n",
    "pipeline.print_code()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "44e2dd7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "with Pipeline(name = \"preprocess\") as p:\n",
    "    CartesianGrid(\n",
    "        output_variable=\"composition_grid\",\n",
    "        grid_spec={'A': {'min': 0.0, 'max': 10.0, 'steps': 50}, 'B': {'min': 0.0, 'max': 25.0, 'steps': 50}},\n",
    "        sample_dim=\"grid\",\n",
    "        component_dim=\"component\",\n",
    "        name=\"CartesianGridGenerator\",\n",
    "    )\n",
    "\n",
    "    Standardize(\n",
    "        input_variable=\"composition_grid\",\n",
    "        output_variable=\"normalized_composition_grid\",\n",
    "        dim=\"grid\",\n",
    "        component_dim=\"component\",\n",
    "        scale_variable=None,\n",
    "        min_val={'A': 0.0, 'B': 0.0},\n",
    "        max_val={'A': 10.0, 'B': 25.0},\n",
    "        name=\"Standardize\",\n",
    "    )\n",
    "\n",
    "    Standardize(\n",
    "        input_variable=\"composition\",\n",
    "        output_variable=\"normalized_composition\",\n",
    "        dim=\"sample\",\n",
    "        component_dim=\"component\",\n",
    "        scale_variable=None,\n",
    "        min_val={'A': 0.0, 'B': 0.0},\n",
    "        max_val={'A': 10.0, 'B': 25.0},\n",
    "        name=\"Standardize\",\n",
    "    )\n",
    "\n",
    "    SavgolFilter(\n",
    "        input_variable=\"measurement\",\n",
    "        output_variable=\"measurement_derivative0\",\n",
    "        dim=\"x\",\n",
    "        xlo=None,\n",
    "        xhi=None,\n",
    "        xlo_isel=None,\n",
    "        xhi_isel=None,\n",
    "        pedestal=None,\n",
    "        npts=250,\n",
    "        derivative=0,\n",
    "        window_length=31,\n",
    "        polyorder=2,\n",
    "        apply_log_scale=True,\n",
    "        name=\"SavgolFilter\",\n",
    "    )\n",
    "\n",
    "    SavgolFilter(\n",
    "        input_variable=\"measurement\",\n",
    "        output_variable=\"measurement_derivative1\",\n",
    "        dim=\"x\",\n",
    "        xlo=None,\n",
    "        xhi=None,\n",
    "        xlo_isel=None,\n",
    "        xhi_isel=None,\n",
    "        pedestal=None,\n",
    "        npts=250,\n",
    "        derivative=1,\n",
    "        window_length=31,\n",
    "        polyorder=2,\n",
    "        apply_log_scale=True,\n",
    "        name=\"SavgolFilter\",\n",
    "    )\n",
    "\n",
    "    SavgolFilter(\n",
    "        input_variable=\"measurement\",\n",
    "        output_variable=\"measurement_derivative2\",\n",
    "        dim=\"x\",\n",
    "        xlo=None,\n",
    "        xhi=None,\n",
    "        xlo_isel=None,\n",
    "        xhi_isel=None,\n",
    "        pedestal=None,\n",
    "        npts=250,\n",
    "        derivative=2,\n",
    "        window_length=31,\n",
    "        polyorder=2,\n",
    "        apply_log_scale=True,\n",
    "        name=\"SavgolFilter\",\n",
    "    )\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee1dff21",
   "metadata": {},
   "source": [
    "## Running the Pipeline\n",
    "\n",
    "Now let's run our customized pipeline on the example dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "56f7039b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5702d4c0a57f497c96d12042889f7689",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=\"dark\"],\n",
       "html[data-theme=\"dark\"],\n",
       "body[data-theme=\"dark\"],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1f1f1f;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: inline-block;\n",
       "  opacity: 0;\n",
       "  height: 0;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:focus + label {\n",
       "  border: 2px solid var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: \"►\";\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: \"▼\";\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: \"(\";\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: \")\";\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: \",\";\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt; Size: 807kB\n",
       "Dimensions:                      (sample: 100, component: 2, x: 150,\n",
       "                                  grid: 2500, log_x: 250)\n",
       "Coordinates:\n",
       "  * component                    (component) &lt;U1 8B &#x27;A&#x27; &#x27;B&#x27;\n",
       "  * x                            (x) float64 1kB 0.001 0.001047 ... 0.9547 1.0\n",
       "  * log_x                        (log_x) float64 2kB -3.0 -2.988 ... 0.0\n",
       "Dimensions without coordinates: sample, grid\n",
       "Data variables:\n",
       "    composition                  (sample, component) float64 2kB ...\n",
       "    ground_truth_labels          (sample) int64 800B ...\n",
       "    measurement                  (sample, x) float64 120kB ...\n",
       "    composition_grid             (grid, component) float64 40kB 0.0 0.0 ... 25.0\n",
       "    normalized_composition_grid  (grid, component) float64 40kB 0.0 0.0 ... 1.0\n",
       "    normalized_composition       (sample, component) float64 2kB 0.1935 ... 0...\n",
       "    measurement_derivative0      (sample, log_x) float64 200kB 6.306 ... 0.3073\n",
       "    measurement_derivative1      (sample, log_x) float64 200kB -3.828 ... -0....\n",
       "    measurement_derivative2      (sample, log_x) float64 200kB -1.838 ... -0....</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-d40af47a-a6af-4cef-ad9e-2847fa3738b9' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-d40af47a-a6af-4cef-ad9e-2847fa3738b9' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span>sample</span>: 100</li><li><span class='xr-has-index'>component</span>: 2</li><li><span class='xr-has-index'>x</span>: 150</li><li><span>grid</span>: 2500</li><li><span class='xr-has-index'>log_x</span>: 250</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-a9d9e8e7-42a2-4f58-b54f-73f70a3761ac' class='xr-section-summary-in' type='checkbox'  checked><label for='section-a9d9e8e7-42a2-4f58-b54f-73f70a3761ac' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>&lt;U1</div><div class='xr-var-preview xr-preview'>&#x27;A&#x27; &#x27;B&#x27;</div><input id='attrs-94243f79-75cd-47b8-b0f0-a762f2e3a173' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-94243f79-75cd-47b8-b0f0-a762f2e3a173' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-83322cf0-0afd-4922-add5-30f543de0d60' class='xr-var-data-in' type='checkbox'><label for='data-83322cf0-0afd-4922-add5-30f543de0d60' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;A&#x27;, &#x27;B&#x27;], dtype=&#x27;&lt;U1&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.001 0.001047 ... 0.9547 1.0</div><input id='attrs-ea6cc962-af3d-49af-9623-705eb7a0f961' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ea6cc962-af3d-49af-9623-705eb7a0f961' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4de8ce3b-9ea6-4134-9f91-758c03546258' class='xr-var-data-in' type='checkbox'><label for='data-4de8ce3b-9ea6-4134-9f91-758c03546258' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0.001   , 0.001047, 0.001097, 0.001149, 0.001204, 0.001261, 0.001321,\n",
       "       0.001383, 0.001449, 0.001518, 0.00159 , 0.001665, 0.001744, 0.001827,\n",
       "       0.001914, 0.002005, 0.0021  , 0.002199, 0.002304, 0.002413, 0.002527,\n",
       "       0.002647, 0.002773, 0.002905, 0.003042, 0.003187, 0.003338, 0.003496,\n",
       "       0.003662, 0.003836, 0.004018, 0.004209, 0.004409, 0.004618, 0.004837,\n",
       "       0.005066, 0.005307, 0.005559, 0.005822, 0.006099, 0.006388, 0.006691,\n",
       "       0.007009, 0.007341, 0.00769 , 0.008055, 0.008437, 0.008837, 0.009256,\n",
       "       0.009696, 0.010156, 0.010638, 0.011142, 0.011671, 0.012225, 0.012805,\n",
       "       0.013413, 0.014049, 0.014716, 0.015414, 0.016146, 0.016912, 0.017714,\n",
       "       0.018555, 0.019435, 0.020358, 0.021324, 0.022335, 0.023395, 0.024505,\n",
       "       0.025668, 0.026886, 0.028162, 0.029498, 0.030898, 0.032364, 0.0339  ,\n",
       "       0.035509, 0.037194, 0.038959, 0.040807, 0.042744, 0.044772, 0.046897,\n",
       "       0.049122, 0.051453, 0.053894, 0.056452, 0.059131, 0.061936, 0.064875,\n",
       "       0.067954, 0.071179, 0.074556, 0.078094, 0.0818  , 0.085681, 0.089747,\n",
       "       0.094006, 0.098467, 0.103139, 0.108033, 0.11316 , 0.118529, 0.124154,\n",
       "       0.130045, 0.136216, 0.14268 , 0.14945 , 0.156542, 0.16397 , 0.171751,\n",
       "       0.179901, 0.188438, 0.197379, 0.206746, 0.216556, 0.226832, 0.237596,\n",
       "       0.24887 , 0.26068 , 0.27305 , 0.286006, 0.299578, 0.313794, 0.328684,\n",
       "       0.344281, 0.360618, 0.37773 , 0.395654, 0.414429, 0.434094, 0.454693,\n",
       "       0.476269, 0.498869, 0.522542, 0.547337, 0.57331 , 0.600514, 0.62901 ,\n",
       "       0.658858, 0.690122, 0.72287 , 0.757172, 0.793102, 0.830736, 0.870156,\n",
       "       0.911447, 0.954697, 1.      ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>log_x</span></div><div class='xr-var-dims'>(log_x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-3.0 -2.988 -2.976 ... -0.01205 0.0</div><input id='attrs-424e2e3c-d10d-4918-a641-4c7621ae2b28' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-424e2e3c-d10d-4918-a641-4c7621ae2b28' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8dacd776-2ede-406a-8c80-33175b716c2c' class='xr-var-data-in' type='checkbox'><label for='data-8dacd776-2ede-406a-8c80-33175b716c2c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([-3.      , -2.987952, -2.975904, ..., -0.024096, -0.012048,  0.      ])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-72ac1221-3902-4ebb-a01e-2926ed75ebb0' class='xr-section-summary-in' type='checkbox'  checked><label for='section-72ac1221-3902-4ebb-a01e-2926ed75ebb0' class='xr-section-summary' >Data variables: <span>(9)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>composition</span></div><div class='xr-var-dims'>(sample, component)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-8f84906e-4246-46a3-80cf-26ab018b9003' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8f84906e-4246-46a3-80cf-26ab018b9003' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bd05b0cb-d14d-4072-a512-bdb9227522c6' class='xr-var-data-in' type='checkbox'><label for='data-bd05b0cb-d14d-4072-a512-bdb9227522c6' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[200 values with dtype=float64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ground_truth_labels</span></div><div class='xr-var-dims'>(sample)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-e775ac11-20d3-48d7-9a6b-9ebd35fa8186' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e775ac11-20d3-48d7-9a6b-9ebd35fa8186' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bbeba845-250f-4076-b058-5e020224d5f9' class='xr-var-data-in' type='checkbox'><label for='data-bbeba845-250f-4076-b058-5e020224d5f9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[100 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>measurement</span></div><div class='xr-var-dims'>(sample, x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-238f5ff5-9c84-45ed-97a5-48971250567d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-238f5ff5-9c84-45ed-97a5-48971250567d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-aef84472-cde0-4ff7-8e6a-001c3ff21720' class='xr-var-data-in' type='checkbox'><label for='data-aef84472-cde0-4ff7-8e6a-001c3ff21720' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[15000 values with dtype=float64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>composition_grid</span></div><div class='xr-var-dims'>(grid, component)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 ... 24.49 10.0 25.0</div><input id='attrs-9ea4e7f6-d78d-4191-978e-cd6fc738eb38' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-9ea4e7f6-d78d-4191-978e-cd6fc738eb38' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-875f28d8-b326-4356-8a1b-84a0a228ccec' class='xr-var-data-in' type='checkbox'><label for='data-875f28d8-b326-4356-8a1b-84a0a228ccec' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>name :</span></dt><dd>CartesianGridGenerator</dd><dt><span>input_variable :</span></dt><dd>CartesianGridGenerator</dd><dt><span>output_variable :</span></dt><dd>composition_grid</dd><dt><span>input_prefix :</span></dt><dd>None</dd><dt><span>output_prefix :</span></dt><dd>None</dd><dt><span>_stored_args :</span></dt><dd>{&#x27;output_variable&#x27;: &#x27;composition_grid&#x27;, &#x27;grid_spec&#x27;: {&#x27;A&#x27;: {&#x27;min&#x27;: 0.0, &#x27;max&#x27;: 10.0, &#x27;steps&#x27;: 50}, &#x27;B&#x27;: {&#x27;min&#x27;: 0.0, &#x27;max&#x27;: 25.0, &#x27;steps&#x27;: 50}}, &#x27;sample_dim&#x27;: &#x27;grid&#x27;, &#x27;component_dim&#x27;: &#x27;component&#x27;, &#x27;name&#x27;: &#x27;CartesianGridGenerator&#x27;}</dd><dt><span>components :</span></dt><dd>[&#x27;A&#x27;, &#x27;B&#x27;]</dd></dl></div><div class='xr-var-data'><pre>array([[ 0.        ,  0.        ],\n",
       "       [ 0.        ,  0.51020408],\n",
       "       [ 0.        ,  1.02040816],\n",
       "       ...,\n",
       "       [10.        , 23.97959184],\n",
       "       [10.        , 24.48979592],\n",
       "       [10.        , 25.        ]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>normalized_composition_grid</span></div><div class='xr-var-dims'>(grid, component)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 ... 0.9796 1.0 1.0</div><input id='attrs-de4ab552-b6d3-4484-8ae3-4a9215bb2101' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-de4ab552-b6d3-4484-8ae3-4a9215bb2101' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7b582c59-5f83-4050-ac95-7d5617388e5c' class='xr-var-data-in' type='checkbox'><label for='data-7b582c59-5f83-4050-ac95-7d5617388e5c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>description :</span></dt><dd>Data normalized to have range 0 -&gt; 1</dd><dt><span>name :</span></dt><dd>Standardize</dd><dt><span>input_variable :</span></dt><dd>composition_grid</dd><dt><span>output_variable :</span></dt><dd>normalized_composition_grid</dd><dt><span>input_prefix :</span></dt><dd>None</dd><dt><span>output_prefix :</span></dt><dd>None</dd><dt><span>_stored_args :</span></dt><dd>{&#x27;input_variable&#x27;: &#x27;composition_grid&#x27;, &#x27;output_variable&#x27;: &#x27;normalized_composition_grid&#x27;, &#x27;dim&#x27;: &#x27;grid&#x27;, &#x27;component_dim&#x27;: &#x27;component&#x27;, &#x27;scale_variable&#x27;: None, &#x27;min_val&#x27;: {&#x27;A&#x27;: 0.0, &#x27;B&#x27;: 0.0}, &#x27;max_val&#x27;: {&#x27;A&#x27;: 10.0, &#x27;B&#x27;: 25.0}, &#x27;name&#x27;: &#x27;Standardize&#x27;}</dd></dl></div><div class='xr-var-data'><pre>array([[0.        , 0.        ],\n",
       "       [0.        , 0.02040816],\n",
       "       [0.        , 0.04081633],\n",
       "       ...,\n",
       "       [1.        , 0.95918367],\n",
       "       [1.        , 0.97959184],\n",
       "       [1.        , 1.        ]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>normalized_composition</span></div><div class='xr-var-dims'>(sample, component)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.1935 0.1736 0.4 ... 0.7878 0.5732</div><input id='attrs-e1049692-92fc-40de-b3f1-125e54cb4db8' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-e1049692-92fc-40de-b3f1-125e54cb4db8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-810dc39e-74a0-4257-a63e-4ca0121382bd' class='xr-var-data-in' type='checkbox'><label for='data-810dc39e-74a0-4257-a63e-4ca0121382bd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>description :</span></dt><dd>Data normalized to have range 0 -&gt; 1</dd><dt><span>name :</span></dt><dd>Standardize</dd><dt><span>input_variable :</span></dt><dd>composition</dd><dt><span>output_variable :</span></dt><dd>normalized_composition</dd><dt><span>input_prefix :</span></dt><dd>None</dd><dt><span>output_prefix :</span></dt><dd>None</dd><dt><span>_stored_args :</span></dt><dd>{&#x27;input_variable&#x27;: &#x27;composition&#x27;, &#x27;output_variable&#x27;: &#x27;normalized_composition&#x27;, &#x27;dim&#x27;: &#x27;sample&#x27;, &#x27;component_dim&#x27;: &#x27;component&#x27;, &#x27;scale_variable&#x27;: None, &#x27;min_val&#x27;: {&#x27;A&#x27;: 0.0, &#x27;B&#x27;: 0.0}, &#x27;max_val&#x27;: {&#x27;A&#x27;: 10.0, &#x27;B&#x27;: 25.0}, &#x27;name&#x27;: &#x27;Standardize&#x27;}</dd></dl></div><div class='xr-var-data'><pre>array([[0.19350696, 0.1735511 ],\n",
       "       [0.39999323, 0.60479245],\n",
       "       [0.51440317, 0.06634039],\n",
       "       [0.45788323, 0.49367328],\n",
       "       [0.80556753, 0.41894355],\n",
       "       [0.10416101, 0.91334468],\n",
       "       [0.5857579 , 0.75250838],\n",
       "       [0.42955818, 0.67657706],\n",
       "       [0.31495021, 0.08357898],\n",
       "       [0.76525175, 0.52200632],\n",
       "       [0.55883305, 0.30212056],\n",
       "       [0.87586496, 0.55600188],\n",
       "       [0.90357984, 0.04164429],\n",
       "       [0.69470929, 0.88156382],\n",
       "       [0.63087273, 0.92327146],\n",
       "       [0.8382142 , 0.97131272],\n",
       "       [0.60986192, 0.22702417],\n",
       "       [0.01217766, 0.06010542],\n",
       "       [0.54271795, 0.96213564],\n",
       "       [0.33277349, 0.5166934 ],\n",
       "...\n",
       "       [0.77637827, 0.87973744],\n",
       "       [0.7459914 , 0.3244696 ],\n",
       "       [0.76385434, 0.54161003],\n",
       "       [0.08173325, 0.37751018],\n",
       "       [0.72005913, 0.23432469],\n",
       "       [0.22080477, 0.27088692],\n",
       "       [0.36547246, 0.17758467],\n",
       "       [0.82134564, 0.42989405],\n",
       "       [0.99214733, 0.62218723],\n",
       "       [0.95266308, 0.2711052 ],\n",
       "       [0.70137984, 0.88809291],\n",
       "       [0.02391468, 0.13985559],\n",
       "       [0.3464569 , 0.51398727],\n",
       "       [0.02661836, 0.32502296],\n",
       "       [0.11156883, 0.01817279],\n",
       "       [0.69141638, 0.8592665 ],\n",
       "       [0.05962323, 0.30767944],\n",
       "       [0.20203193, 0.19743203],\n",
       "       [0.52140263, 0.19370912],\n",
       "       [0.78782424, 0.57321402]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>measurement_derivative0</span></div><div class='xr-var-dims'>(sample, log_x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>6.306 6.259 6.213 ... 0.3078 0.3073</div><input id='attrs-b3ddc467-51f1-485f-a548-2eadba92eeb9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-b3ddc467-51f1-485f-a548-2eadba92eeb9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-15d3c579-a2a5-4d45-b740-dc9152768e08' class='xr-var-data-in' type='checkbox'><label for='data-15d3c579-a2a5-4d45-b740-dc9152768e08' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>description :</span></dt><dd>Savitsky-Golay filtered data</dd><dt><span>name :</span></dt><dd>SavgolFilter</dd><dt><span>input_variable :</span></dt><dd>measurement</dd><dt><span>output_variable :</span></dt><dd>measurement_derivative0</dd><dt><span>input_prefix :</span></dt><dd>None</dd><dt><span>output_prefix :</span></dt><dd>None</dd><dt><span>_stored_args :</span></dt><dd>{&#x27;input_variable&#x27;: &#x27;measurement&#x27;, &#x27;output_variable&#x27;: &#x27;measurement_derivative0&#x27;, &#x27;dim&#x27;: &#x27;x&#x27;, &#x27;xlo&#x27;: None, &#x27;xhi&#x27;: None, &#x27;xlo_isel&#x27;: None, &#x27;xhi_isel&#x27;: None, &#x27;pedestal&#x27;: None, &#x27;npts&#x27;: 250, &#x27;derivative&#x27;: 0, &#x27;window_length&#x27;: 31, &#x27;polyorder&#x27;: 2, &#x27;apply_log_scale&#x27;: True, &#x27;name&#x27;: &#x27;SavgolFilter&#x27;}</dd></dl></div><div class='xr-var-data'><pre>array([[6.30563387, 6.25937812, 6.21285551, ..., 0.25091915, 0.24839576,\n",
       "        0.2459309 ],\n",
       "       [6.25520769, 6.21474481, 6.17373602, ..., 0.30378809, 0.3073302 ,\n",
       "        0.31106921],\n",
       "       [6.29807208, 6.2514212 , 6.20462334, ..., 0.34531082, 0.35438886,\n",
       "        0.36405585],\n",
       "       ...,\n",
       "       [6.28535392, 6.23468884, 6.18433828, ..., 0.30281236, 0.30375312,\n",
       "        0.30477185],\n",
       "       [6.27650503, 6.23702423, 6.19691028, ..., 0.27402484, 0.27197968,\n",
       "        0.26980797],\n",
       "       [6.2646559 , 6.21209494, 6.16007247, ..., 0.30817193, 0.30775822,\n",
       "        0.30729468]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>measurement_derivative1</span></div><div class='xr-var-dims'>(sample, log_x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-3.828 -3.85 ... -0.03641 -0.04054</div><input id='attrs-edaf9469-385d-41c8-ac49-3e20084a734f' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-edaf9469-385d-41c8-ac49-3e20084a734f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5c4a8ae5-83dc-4913-a40b-5cf1260b1b81' class='xr-var-data-in' type='checkbox'><label for='data-5c4a8ae5-83dc-4913-a40b-5cf1260b1b81' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>description :</span></dt><dd>Savitsky-Golay filtered data</dd><dt><span>name :</span></dt><dd>SavgolFilter</dd><dt><span>input_variable :</span></dt><dd>measurement</dd><dt><span>output_variable :</span></dt><dd>measurement_derivative1</dd><dt><span>input_prefix :</span></dt><dd>None</dd><dt><span>output_prefix :</span></dt><dd>None</dd><dt><span>_stored_args :</span></dt><dd>{&#x27;input_variable&#x27;: &#x27;measurement&#x27;, &#x27;output_variable&#x27;: &#x27;measurement_derivative1&#x27;, &#x27;dim&#x27;: &#x27;x&#x27;, &#x27;xlo&#x27;: None, &#x27;xhi&#x27;: None, &#x27;xlo_isel&#x27;: None, &#x27;xhi_isel&#x27;: None, &#x27;pedestal&#x27;: None, &#x27;npts&#x27;: 250, &#x27;derivative&#x27;: 1, &#x27;window_length&#x27;: 31, &#x27;polyorder&#x27;: 2, &#x27;apply_log_scale&#x27;: True, &#x27;name&#x27;: &#x27;SavgolFilter&#x27;}</dd></dl></div><div class='xr-var-data'><pre>array([[-3.82815189, -3.85030191, -3.87245192, ..., -0.21187028,\n",
       "        -0.20701209, -0.2021539 ],\n",
       "       [-3.33576502, -3.38107428, -3.42638353, ...,  0.2858237 ,\n",
       "         0.3021667 ,  0.31850969],\n",
       "       [-3.86592377, -3.8781227 , -3.89032162, ...,  0.72903554,\n",
       "         0.77791869,  0.82680185],\n",
       "       ...,\n",
       "       [-4.21825364, -4.19214886, -4.16604407, ...,  0.07484659,\n",
       "         0.08131892,  0.08779125],\n",
       "       [-3.25063037, -3.30318201, -3.35573365, ..., -0.16449625,\n",
       "        -0.17500039, -0.18550452],\n",
       "       [-4.38490681, -4.3402124 , -4.29551799, ..., -0.03226873,\n",
       "        -0.03640584, -0.04054294]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>measurement_derivative2</span></div><div class='xr-var-dims'>(sample, log_x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-1.838 -1.838 ... -0.3434 -0.3434</div><input id='attrs-1b0869ed-4f8b-42d4-96e3-8898d51b6ce6' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-1b0869ed-4f8b-42d4-96e3-8898d51b6ce6' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-184b3e07-6f04-46a1-9b42-fabb912c1fbc' class='xr-var-data-in' type='checkbox'><label for='data-184b3e07-6f04-46a1-9b42-fabb912c1fbc' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>description :</span></dt><dd>Savitsky-Golay filtered data</dd><dt><span>name :</span></dt><dd>SavgolFilter</dd><dt><span>input_variable :</span></dt><dd>measurement</dd><dt><span>output_variable :</span></dt><dd>measurement_derivative2</dd><dt><span>input_prefix :</span></dt><dd>None</dd><dt><span>output_prefix :</span></dt><dd>None</dd><dt><span>_stored_args :</span></dt><dd>{&#x27;input_variable&#x27;: &#x27;measurement&#x27;, &#x27;output_variable&#x27;: &#x27;measurement_derivative2&#x27;, &#x27;dim&#x27;: &#x27;x&#x27;, &#x27;xlo&#x27;: None, &#x27;xhi&#x27;: None, &#x27;xlo_isel&#x27;: None, &#x27;xhi_isel&#x27;: None, &#x27;pedestal&#x27;: None, &#x27;npts&#x27;: 250, &#x27;derivative&#x27;: 2, &#x27;window_length&#x27;: 31, &#x27;polyorder&#x27;: 2, &#x27;apply_log_scale&#x27;: True, &#x27;name&#x27;: &#x27;SavgolFilter&#x27;}</dd></dl></div><div class='xr-var-data'><pre>array([[-1.83845126, -1.83845126, -1.83845126, ...,  0.40322989,\n",
       "         0.40322989,  0.40322989],\n",
       "       [-3.76066781, -3.76066781, -3.76066781, ...,  1.35646895,\n",
       "         1.35646895,  1.35646895],\n",
       "       [-1.01251085, -1.01251085, -1.01251085, ...,  4.0573021 ,\n",
       "         4.0573021 ,  4.0573021 ],\n",
       "       ...,\n",
       "       [ 2.16669708,  2.16669708,  2.16669708, ...,  0.53720341,\n",
       "         0.53720341,  0.53720341],\n",
       "       [-4.36178593, -4.36178593, -4.36178593, ..., -0.87184319,\n",
       "        -0.87184319, -0.87184319],\n",
       "       [ 3.70963591,  3.70963591,  3.70963591, ..., -0.34337959,\n",
       "        -0.34337959, -0.34337959]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-555adfb8-6e9d-4e10-a4b7-6fbd53a5d838' class='xr-section-summary-in' type='checkbox'  ><label for='section-555adfb8-6e9d-4e10-a4b7-6fbd53a5d838' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-1df6b5b8-e799-4393-a83e-a75a1a94da66' class='xr-index-data-in' type='checkbox'/><label for='index-1df6b5b8-e799-4393-a83e-a75a1a94da66' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;A&#x27;, &#x27;B&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-86ae318d-1673-4c24-9397-8f23348f5749' class='xr-index-data-in' type='checkbox'/><label for='index-86ae318d-1673-4c24-9397-8f23348f5749' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([                0.001, 0.0010474522360006332, 0.0010971561867027272,\n",
       "       0.0011492187010036998, 0.0012037516980200685, 0.0012608724076806808,\n",
       "        0.001320703622736631, 0.0013833739627296209,  0.001449018150486198,\n",
       "       0.0015177773017322714,\n",
       "       ...\n",
       "          0.6588581861506815,    0.6901224802908528,    0.7228703350949566,\n",
       "            0.75717214883374,    0.7931016603333051,    0.8307361074919352,\n",
       "          0.8701563933188907,    0.9114472598521185,    0.9546974703287516,\n",
       "                         1.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;, length=150))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>log_x</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-28e9c27d-d125-4673-9f64-94e591afefb0' class='xr-index-data-in' type='checkbox'/><label for='index-28e9c27d-d125-4673-9f64-94e591afefb0' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([                 -3.0,   -2.9879518072289155,   -2.9759036144578315,\n",
       "          -2.963855421686747,   -2.9518072289156625,   -2.9397590361445785,\n",
       "          -2.927710843373494,   -2.9156626506024095,   -2.9036144578313254,\n",
       "          -2.891566265060241,\n",
       "       ...\n",
       "        -0.10843373493975905,  -0.09638554216867457,  -0.08433734939759008,\n",
       "        -0.07228915662650603,  -0.06024096385542155,  -0.04819277108433706,\n",
       "        -0.03614457831325302,  -0.02409638554216853, -0.012048192771084043,\n",
       "                         0.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;log_x&#x27;, length=250))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-660cf59c-fec1-4dbb-8f51-bfb11ae061b8' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-660cf59c-fec1-4dbb-8f51-bfb11ae061b8' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset> Size: 807kB\n",
       "Dimensions:                      (sample: 100, component: 2, x: 150,\n",
       "                                  grid: 2500, log_x: 250)\n",
       "Coordinates:\n",
       "  * component                    (component) <U1 8B 'A' 'B'\n",
       "  * x                            (x) float64 1kB 0.001 0.001047 ... 0.9547 1.0\n",
       "  * log_x                        (log_x) float64 2kB -3.0 -2.988 ... 0.0\n",
       "Dimensions without coordinates: sample, grid\n",
       "Data variables:\n",
       "    composition                  (sample, component) float64 2kB ...\n",
       "    ground_truth_labels          (sample) int64 800B ...\n",
       "    measurement                  (sample, x) float64 120kB ...\n",
       "    composition_grid             (grid, component) float64 40kB 0.0 0.0 ... 25.0\n",
       "    normalized_composition_grid  (grid, component) float64 40kB 0.0 0.0 ... 1.0\n",
       "    normalized_composition       (sample, component) float64 2kB 0.1935 ... 0...\n",
       "    measurement_derivative0      (sample, log_x) float64 200kB 6.306 ... 0.3073\n",
       "    measurement_derivative1      (sample, log_x) float64 200kB -3.828 ... -0....\n",
       "    measurement_derivative2      (sample, log_x) float64 200kB -1.838 ... -0...."
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Run the pipeline on the dataset\n",
    "result = p.calculate(dataset)\n",
    "result\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6147527b",
   "metadata": {},
   "source": [
    "## Visualizing the Results\n",
    "\n",
    "Let's visualize the results of our pipeline:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "77199bf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x3135b9450>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axes = plt.subplots(1,2,figsize=(8,3))\n",
    "result.composition.to_dataset('component').plot.scatter(x='A',y='B',ax=axes[0])\n",
    "result.normalized_composition.to_dataset('component').plot.scatter(x='A',y='B',ax=axes[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f66648d",
   "metadata": {},
   "source": [
    "We can see that the relative positions of the compositions are unchanged, we simply renormalized the bounds of the data. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b004cfe",
   "metadata": {},
   "source": [
    "## Combining Multiple Prefabs\n",
    "\n",
    "One of the powerful features of prefabricated pipelines is the ability to combine multiple prefabs into a single pipeline:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "72a70d7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Combine multiple prefabs if you have more than one available\n",
    "combined_pipeline = combine_prefabs([\"preprocess\", \"similarity_clustering\"], new_name=\"CombinedPipeline\")\n",
    "combined_pipeline.draw();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f4a9286",
   "metadata": {},
   "source": [
    "Conclusion\n",
    "---------\n",
    "\n",
    "In this tutorial, we learned how to:\n",
    "\n",
    "1. Load an example dataset from the ``AFL.double_agent.data`` module\n",
    "2. List and load prefabricated pipelines from the ``AFL.double_agent.prefab`` module\n",
    "3. Inspect the structure of a pipeline using ``.draw()`` and ``.print()`` methods\n",
    "4. Generate and modify code for a pipeline using ``.print_code()``\n",
    "5. Run a customized pipeline on a dataset and visualize the results\n",
    "6. Combine multiple prefabricated pipelines\n",
    "\n",
    "Prefabricated pipelines provide a convenient way to reuse and share pipeline configurations, making your analysis workflows more efficient and reproducible."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
